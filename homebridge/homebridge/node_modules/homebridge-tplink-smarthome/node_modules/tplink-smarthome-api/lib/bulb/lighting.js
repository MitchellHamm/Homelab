"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _lightState;
Object.defineProperty(exports, "__esModule", { value: true });
exports.isLightStateResponse = exports.isLightState = void 0;
const lodash_isequal_1 = __importDefault(require("lodash.isequal"));
const utils_1 = require("../utils");
function isLightState(candidate) {
    return utils_1.isObjectLike(candidate);
}
exports.isLightState = isLightState;
function isLightStateResponse(candidate) {
    return utils_1.isObjectLike(candidate) && utils_1.hasErrCode(candidate);
}
exports.isLightStateResponse = isLightStateResponse;
class Lighting {
    constructor(device, apiModuleName) {
        this.device = device;
        this.apiModuleName = apiModuleName;
        /**
         * @internal
         */
        this.lastState = {
            powerOn: undefined,
            lightState: undefined,
        };
        /**
         * @internal
         */
        _lightState.set(this, {});
    }
    /**
     * Returns cached results from last retrieval of `lightingservice.get_light_state`.
     * @returns cached results from last retrieval of `lightingservice.get_light_state`.
     */
    get lightState() {
        return __classPrivateFieldGet(this, _lightState);
    }
    /**
     * @internal
     */
    set lightState(lightState) {
        __classPrivateFieldSet(this, _lightState, lightState);
        this.emitEvents();
    }
    emitEvents() {
        if (!__classPrivateFieldGet(this, _lightState))
            return;
        const powerOn = __classPrivateFieldGet(this, _lightState).on_off === 1;
        if (this.lastState.powerOn !== powerOn) {
            this.lastState.powerOn = powerOn;
            if (powerOn) {
                this.device.emit('lightstate-on', __classPrivateFieldGet(this, _lightState));
            }
            else {
                this.device.emit('lightstate-off', __classPrivateFieldGet(this, _lightState));
            }
        }
        if (!lodash_isequal_1.default(this.lastState.lightState, __classPrivateFieldGet(this, _lightState))) {
            this.lastState.lightState = __classPrivateFieldGet(this, _lightState);
            this.device.emit('lightstate-change', __classPrivateFieldGet(this, _lightState));
        }
        this.device.emit('lightstate-update', __classPrivateFieldGet(this, _lightState));
    }
    /**
     * Get Bulb light state.
     *
     * Requests `lightingservice.get_light_state`.
     * @returns parsed JSON response
     * @throws {@link ResponseError}
     */
    async getLightState(sendOptions) {
        this.lightState = utils_1.extractResponse(await this.device.sendCommand({
            [this.apiModuleName]: { get_light_state: {} },
        }, undefined, sendOptions), '', isLightStateResponse);
        return this.lightState;
    }
    /**
     * Sets Bulb light state (on/off, brightness, color, etc).
     *
     * Sends `lightingservice.transition_light_state` command.
     * @param  lightState - light state
     * @param  sendOptions - send options
     */
    async setLightState(lightState, sendOptions) {
        const { 
        /* eslint-disable @typescript-eslint/naming-convention */
        transition_period, on_off, mode, hue, saturation, brightness, color_temp, ignore_default = 1,
        /* eslint-enable @typescript-eslint/naming-convention */
         } = lightState;
        const state = {};
        if (utils_1.isDefinedAndNotNull(ignore_default))
            state.ignore_default = ignore_default ? 1 : 0;
        if (utils_1.isDefinedAndNotNull(transition_period))
            state.transition_period = transition_period;
        if (utils_1.isDefinedAndNotNull(on_off))
            state.on_off = on_off ? 1 : 0;
        if (utils_1.isDefinedAndNotNull(mode))
            state.mode = mode;
        if (utils_1.isDefinedAndNotNull(hue))
            state.hue = hue;
        if (utils_1.isDefinedAndNotNull(saturation))
            state.saturation = saturation;
        if (utils_1.isDefinedAndNotNull(brightness))
            state.brightness = brightness;
        if (utils_1.isDefinedAndNotNull(color_temp))
            state.color_temp = color_temp;
        this.lightState = utils_1.extractResponse(await this.device.sendCommand({
            [this.apiModuleName]: { transition_light_state: state },
        }, undefined, sendOptions), '', isLightStateResponse);
        return true;
    }
}
exports.default = Lighting;
_lightState = new WeakMap();
//# sourceMappingURL=lighting.js.map