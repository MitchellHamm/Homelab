import { Categories } from 'homebridge';
import type { API, Characteristic, DynamicPlatformPlugin, Logging, PlatformAccessory, PlatformConfig, Service, WithUUID } from 'homebridge';
import type { TplinkSmarthomeConfig } from './config';
export default class TplinkSmarthomePlatform implements DynamicPlatformPlugin {
    readonly log: Logging;
    readonly api: API;
    readonly Service: typeof Service;
    readonly Characteristic: typeof Characteristic;
    customCharacteristics: {
        [key: string]: WithUUID<new () => Characteristic>;
    };
    config: TplinkSmarthomeConfig;
    private readonly homebridgeAccessories;
    private readonly deviceAccessories;
    constructor(log: Logging, config: PlatformConfig, api: API);
    /**
     * Return string representation of Service/Characteristic for logging
     *
     * @internal
     */
    lsc(serviceOrCharacteristic: Service | Characteristic | {
        UUID: string;
    }, characteristic?: Characteristic | {
        UUID: string;
    }): string;
    private get deviceAccessoriesByHost();
    private createTplinkAccessory;
    getCategoryName(category: Categories): string | undefined;
    getServiceName(service: {
        UUID: string;
    }): string | undefined;
    getCharacteristicName(characteristic: WithUUID<{
        name?: string;
        displayName?: string;
    }>): string | undefined;
    /**
     * Registers a Homebridge PlatformAccessory.
     *
     * Calls {@link external:homebridge.API#registerPlatformAccessories}
     */
    registerPlatformAccessory(platformAccessory: PlatformAccessory): void;
    /**
     * Function invoked when homebridge tries to restore cached accessory
     */
    configureAccessory(accessory: PlatformAccessory): void;
    /**
     * Adds a new or existing real device.
     */
    private foundDevice;
    /**
     * Removes an accessory and unregisters it from Homebridge
     */
    private removeAccessory;
}
//# sourceMappingURL=platform.d.ts.map