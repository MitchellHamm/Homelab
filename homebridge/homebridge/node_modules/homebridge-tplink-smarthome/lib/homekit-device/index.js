"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const utils_1 = require("../utils");
class HomeKitDevice {
    /**
     * Creates an instance of HomeKitDevice.
     */
    constructor(platform, tplinkDevice, category) {
        this.platform = platform;
        this.tplinkDevice = tplinkDevice;
        this.category = category;
        this.characteristics = {};
        this.log = utils_1.prefixLogger(platform.log, () => `${chalk_1.default.blue(`[${this.name}]`)}`);
        this.lsc = this.platform.lsc.bind(this.platform);
        this.addCharacteristic(platform.Characteristic.Name, {
            getValue: async () => {
                return this.name;
            },
        });
    }
    get id() {
        return this.tplinkDevice.id;
    }
    get name() {
        return this.tplinkDevice.alias;
    }
    // eslint-disable-next-line class-methods-use-this
    get manufacturer() {
        return 'TP-Link';
    }
    get model() {
        return this.tplinkDevice.model;
    }
    get serialNumber() {
        return `${this.tplinkDevice.mac} ${this.tplinkDevice.id}`;
    }
    get firmwareRevision() {
        return this.tplinkDevice.softwareVersion;
    }
    get hardwareRevision() {
        return this.tplinkDevice.hardwareVersion;
    }
    supportsCharacteristic(characteristic) {
        return this.getCharacteristic(characteristic) !== undefined;
    }
    supportsCharacteristicSet(characteristic) {
        const c = this.getCharacteristic(characteristic);
        if (c === undefined)
            return false;
        return typeof c.setValue === 'function';
    }
    addCharacteristic(characteristic, config) {
        this.characteristics[characteristic.UUID] = config;
    }
    getCharacteristic(characteristic) {
        return this.characteristics[characteristic.UUID];
    }
    getCharacteristicProps(characteristic) {
        this.log.debug('getCharacteristicProps', this.lsc(characteristic));
        return this.getCharacteristic(characteristic).props;
    }
    async getCharacteristicValue(characteristic) {
        this.log.debug(`getCharacteristicValue ${this.lsc(characteristic)}`);
        const c = this.getCharacteristic(characteristic);
        if (!('getValue' in c) || c.getValue === undefined)
            return null;
        return c.getValue();
    }
    async setCharacteristicValue(characteristic, value) {
        this.log.debug('setCharacteristicValue %s %s', this.lsc(characteristic), value);
        const c = this.getCharacteristic(characteristic);
        if (!('setValue' in c) || c.setValue === undefined)
            return undefined;
        return c.setValue(value);
    }
    fireCharacteristicUpdateCallback(characteristic, value) {
        this.log.debug(`fireCharacteristicUpdateCallback ${this.lsc(characteristic)} %s`, value);
        const c = this.getCharacteristic(characteristic);
        if (c && typeof c.updateCallback === 'function') {
            c.updateCallback(value);
            return;
        }
        // Characteristic may not be setup on device (e.g. addCustomCharacteristics is false)
        // Warn if characteristic exists, but do not warn if characteristic does not exist
        if (c) {
            this.log.warn(`fireCharacteristicUpdateCallback ${this.lsc(characteristic)}: Unable to call updateCallback`);
        }
        else {
            this.log.debug(`fireCharacteristicUpdateCallback [${this.lsc(characteristic)}]: Unable to call updateCallback`);
        }
    }
    setCharacteristicUpdateCallback(characteristic, callbackFn) {
        this.log.debug(`setCharacteristicUpdateCallback ${this.lsc(characteristic)}`, callbackFn.name);
        const c = this.getCharacteristic(characteristic);
        c.updateCallback = callbackFn;
    }
    logRejection(reason) {
        this.log.error(JSON.stringify(reason));
    }
}
exports.default = HomeKitDevice;
//# sourceMappingURL=index.js.map