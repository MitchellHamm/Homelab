"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = __importDefault(require("."));
const utils_1 = require("../utils");
class HomeKitDevicePlug extends _1.default {
    constructor(platform, tplinkDevice, category) {
        super(platform, tplinkDevice, category);
        this.tplinkDevice = tplinkDevice;
        this.category = category;
        this.addBasicCharacteristics();
        if (tplinkDevice.supportsDimmer) {
            this.addBrightnessCharacteristics();
        }
        if (platform.config.addCustomCharacteristics &&
            tplinkDevice.supportsEmeter) {
            this.addEnergyCharacteristics();
        }
        this.getSysInfo = utils_1.deferAndCombine((requestCount) => {
            this.log.debug(`executing deferred getSysInfo count: ${requestCount}`);
            return this.tplinkDevice.getSysInfo();
        }, platform.config.waitTimeUpdate);
        this.setPowerState = utils_1.deferAndCombine(async (requestCount) => {
            this.log.debug(`executing deferred setPowerState count: ${requestCount}`);
            if (this.desiredPowerState === undefined) {
                this.log.warn('setPowerState called with undefined desiredPowerState');
                return Promise.resolve(true);
            }
            const ret = await this.tplinkDevice.setPowerState(this.desiredPowerState);
            this.desiredPowerState = undefined;
            return ret;
        }, platform.config.waitTimeUpdate, (value) => {
            this.desiredPowerState = value;
        });
        this.getRealtime = utils_1.deferAndCombine((requestCount) => {
            this.log.debug(`executing deferred getRealtime count: ${requestCount}`);
            return this.tplinkDevice.emeter.getRealtime();
        }, platform.config.waitTimeUpdate);
    }
    addBasicCharacteristics() {
        this.addCharacteristic(this.platform.Characteristic.On, {
            getValue: async () => {
                this.getSysInfo().catch(this.logRejection.bind(this)); // this will eventually trigger update
                return this.tplinkDevice.relayState; // immediately returned cached value
            },
            setValue: async (value) => {
                if (typeof value === 'boolean') {
                    await this.setPowerState(value);
                    return;
                }
                this.log.warn('setValue: Invalid On:', value);
            },
        });
        this.tplinkDevice.on('power-update', (value) => {
            this.fireCharacteristicUpdateCallback(this.platform.Characteristic.On, value);
        });
        if (this.category === 7 /* OUTLET */) {
            this.addCharacteristic(this.platform.Characteristic.OutletInUse, {
                getValue: async () => {
                    this.getSysInfo().catch(this.logRejection.bind(this)); // this will eventually trigger update
                    return this.tplinkDevice.inUse; // immediately returned cached value
                },
            });
            this.tplinkDevice.on('in-use-update', (value) => {
                this.fireCharacteristicUpdateCallback(this.platform.Characteristic.OutletInUse, value);
            });
        }
    }
    addBrightnessCharacteristics() {
        this.addCharacteristic(this.platform.Characteristic.Brightness, {
            getValue: async () => {
                this.getSysInfo().catch(this.logRejection.bind(this)); // this will eventually trigger update
                return this.tplinkDevice.dimmer.brightness; // immediately returned cached value
            },
            setValue: async (value) => {
                if (typeof value === 'number') {
                    await this.tplinkDevice.dimmer.setBrightness(value);
                    return;
                }
                this.log.warn('setValue: Invalid Brightness:', value);
            },
        });
        this.tplinkDevice.on('brightness-update', (value) => {
            this.fireCharacteristicUpdateCallback(this.platform.Characteristic.Brightness, value);
        });
    }
    addEnergyCharacteristics() {
        this.addCharacteristic(this.platform.customCharacteristics.Amperes, {
            getValue: async () => {
                var _a;
                this.getRealtime().catch(this.logRejection.bind(this)); // this will eventually trigger update
                return (_a = this.tplinkDevice.emeter.realtime.current) !== null && _a !== void 0 ? _a : 0; // immediately returned cached value
            },
        });
        this.addCharacteristic(this.platform.customCharacteristics.KilowattHours, {
            getValue: async () => {
                var _a;
                this.getRealtime().catch(this.logRejection.bind(this)); // this will eventually trigger update
                return (_a = this.tplinkDevice.emeter.realtime.total) !== null && _a !== void 0 ? _a : 0; // immediately returned cached value
            },
        });
        this.addCharacteristic(this.platform.customCharacteristics.VoltAmperes, {
            getValue: async () => {
                var _a, _b;
                this.getRealtime().catch(this.logRejection.bind(this)); // this will eventually trigger update
                const { realtime } = this.tplinkDevice.emeter;
                return ((_a = realtime.voltage) !== null && _a !== void 0 ? _a : 0) * ((_b = realtime.voltage) !== null && _b !== void 0 ? _b : 0); // immediately returned cached value
            },
        });
        this.addCharacteristic(this.platform.customCharacteristics.Volts, {
            getValue: async () => {
                var _a;
                this.getRealtime().catch(this.logRejection.bind(this)); // this will eventually trigger update
                return (_a = this.tplinkDevice.emeter.realtime.voltage) !== null && _a !== void 0 ? _a : 0; // immediately returned cached value
            },
        });
        this.addCharacteristic(this.platform.customCharacteristics.Watts, {
            getValue: async () => {
                var _a;
                this.getRealtime().catch(this.logRejection.bind(this)); // this will eventually trigger update
                return (_a = this.tplinkDevice.emeter.realtime.power) !== null && _a !== void 0 ? _a : 0; // immediately returned cached value
            },
        });
        this.tplinkDevice.on('emeter-realtime-update', (emeterRealtime) => {
            this.fireCharacteristicUpdateCallback(this.platform.customCharacteristics.Amperes, emeterRealtime.current);
            this.fireCharacteristicUpdateCallback(this.platform.customCharacteristics.KilowattHours, emeterRealtime.total);
            this.fireCharacteristicUpdateCallback(this.platform.customCharacteristics.VoltAmperes, emeterRealtime.voltage * emeterRealtime.current);
            this.fireCharacteristicUpdateCallback(this.platform.customCharacteristics.Volts, emeterRealtime.voltage);
            this.fireCharacteristicUpdateCallback(this.platform.customCharacteristics.Watts, emeterRealtime.power);
        });
    }
    identify() {
        this.log.info(`identify`);
        this.tplinkDevice
            .blink(1, 500)
            .then(() => {
            return this.tplinkDevice.blink(2, 500);
        })
            .then(() => {
            this.log.debug(`identify done`);
        })
            .catch((reason) => {
            this.log.error(`identify complete`);
            this.log.error(reason);
        });
    }
}
exports.default = HomeKitDevicePlug;
//# sourceMappingURL=plug.js.map