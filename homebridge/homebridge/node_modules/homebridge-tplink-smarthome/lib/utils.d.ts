import type { Characteristic, Logger, Logging, Service, WithUUID } from 'homebridge';
import type { Bulb, Plug } from 'tplink-smarthome-api';
export declare type TplinkDevice = Bulb | Plug;
export declare function isObjectLike(candidate: unknown): candidate is Record<string, unknown>;
/**
 * Creates a function that will "batch" calls that are within the `timeout`
 *
 * The first time the function that is created is called, it will wait the `timeout` for additional calls.
 * After the `timeout` expires the result of one execution of `fn` will be resolved to all calls during the `timeout`.
 *
 * If `runNowFn` is specified it will be run synchronously without a timeout. Useful for functions that are used to set rather than get.
 *
 * @param {() => Promise<T>} fn
 * @param {number} timeout (ms)
 * @param {(arg: U) => void} [runNowFn]
 * @returns {(arg?: U) => Promise<T>}
 */
export declare function deferAndCombine<T, U>(fn: (requestCount: number) => Promise<T>, timeout: number, runNowFn?: (arg: U) => void): (arg?: U) => Promise<T>;
export declare function delay(ms: number): Promise<void>;
export declare function getOrAddCharacteristic(service: Service, characteristic: WithUUID<new () => Characteristic>): Characteristic;
export declare function kelvinToMired(kelvin: number): number;
export declare function lookup<T>(object: unknown, compareFn: undefined | ((objectProp: unknown, search: T) => boolean), value: T): string | undefined;
export declare function lookupCharacteristicNameByUUID(characteristic: typeof Characteristic, uuid: string): string | undefined;
export declare function miredToKelvin(mired: number): number;
export declare function prefixLogger(logger: Logger, prefix: string | (() => string)): Logging;
//# sourceMappingURL=utils.d.ts.map