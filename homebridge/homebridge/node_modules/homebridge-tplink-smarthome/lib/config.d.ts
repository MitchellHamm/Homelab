import { ErrorObject as AjvErrorObject } from 'ajv';
export declare class ConfigParseError extends Error {
    readonly errors?: AjvErrorObject<string, Record<string, unknown>, unknown>[] | null | undefined;
    /**
     * Set by `Error.captureStackTrace`
     */
    readonly stack = "";
    constructor(message: string, errors?: AjvErrorObject<string, Record<string, unknown>, unknown>[] | null | undefined);
}
export interface DeviceConfigInput {
    host: string;
    port?: number | undefined;
}
export interface TplinkSmarthomeConfigInput {
    /**
     * Adds energy monitoring characteristics viewable in Eve app
     * plug: Amperes, KilowattHours, VoltAmperes, Volts, Watts
     * bulb: Watts
     * @defaultValue true
     */
    addCustomCharacteristics?: boolean;
    /**
     * (Watts) For plugs that support energy monitoring (e.g. HS110), min power draw for OutletInUse
     * @defaultValue 0
     */
    inUseThreshold?: number;
    /**
     * Matching models are created in HomeKit as a Switch instead of an Outlet
     * @defaultValue ['HS200', 'HS210']
     */
    switchModels?: Array<string>;
    /**
     * port to bind udp socket
     */
    discoveryPort?: number;
    /**
     * Broadcast Address. If discovery is not working tweak to match your subnet, eg: 192.168.0.255
     * @defaultValue '255.255.255.255'
     */
    broadcast?: string;
    /**
     * (seconds) How often to check device status in the background
     * @defaultValue 10
     */
    pollingInterval?: number;
    /**
     * ["plug", "bulb"] to find all TPLink device types or ["plug"] / ["bulb"] for only plugs or bulbs
     * @defaultValue ["plug", "bulb"]
     */
    deviceTypes?: Array<'plug' | 'bulb'>;
    /**
     * Allow-list of mac addresses to include. If specified will ignore other devices.
     * MAC Addresses are normalized, special characters are removed and made uppercase for comparison.
     * Supports glob-style patterns
     */
    macAddresses?: Array<string>;
    /**
     * Deny-list of mac addresses to exclude.
     * MAC Addresses are normalized, special characters are removed and made uppercase for comparison.
     * Supports glob-style patterns
     */
    excludeMacAddresses?: Array<string>;
    /**
     * Manual list of devices (see "Manually Specifying Devices" section below)
     */
    devices?: Array<DeviceConfigInput>;
    /**
     * (seconds) communication timeout
     * @defaultValue 15
     */
    timeout?: number;
    /**
     * Use 'tcp' or 'udp' for device communication. Discovery will always use 'udp'
     */
    transport?: 'tcp' | 'udp';
    /**
     * (milliseconds) The time to wait to combine similar commands for a device before sending a command to a device
     * @defaultValue 100
     */
    waitTimeUpdate?: number;
}
declare type TplinkSmarthomeConfigDefault = {
    addCustomCharacteristics: boolean;
    inUseThreshold: number;
    switchModels: Array<string>;
    discoveryPort: number;
    broadcast: string;
    pollingInterval: number;
    deviceTypes: Array<'plug' | 'bulb'>;
    macAddresses?: Array<string>;
    excludeMacAddresses?: Array<string>;
    devices?: Array<{
        host: string;
        port?: number | undefined;
    }>;
    timeout: number;
    transport: 'tcp' | 'udp' | undefined;
    waitTimeUpdate: number;
};
export declare type TplinkSmarthomeConfig = {
    addCustomCharacteristics: boolean;
    switchModels: Array<string>;
    waitTimeUpdate: number;
    defaultSendOptions: {
        timeout: number;
        transport: 'tcp' | 'udp' | undefined;
    };
    discoveryOptions: {
        port: number | undefined;
        broadcast: string;
        discoveryInterval: number;
        deviceTypes?: Array<'plug' | 'bulb'>;
        deviceOptions: {
            defaultSendOptions: {
                timeout: number;
                transport: 'tcp' | 'udp' | undefined;
            };
            inUseThreshold: number;
        };
        macAddresses?: Array<string>;
        excludeMacAddresses?: Array<string>;
        devices?: Array<{
            host: string;
            port?: number | undefined;
        }>;
    };
};
export declare const defaultConfig: TplinkSmarthomeConfigDefault;
export declare function parseConfig(config: Record<string, unknown>): TplinkSmarthomeConfig;
export {};
//# sourceMappingURL=config.d.ts.map