"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const create_1 = __importDefault(require("./homekit-device/create"));
const accessory_information_1 = __importDefault(require("./accessory-information"));
const utils_1 = require("./utils");
class TplinkAccessory {
    constructor(platform, config, homebridgeAccessory, tplinkDevice, category, services) {
        var _a;
        this.platform = platform;
        this.config = config;
        this.tplinkDevice = tplinkDevice;
        this.services = {};
        const CustomCharacteristic = platform.customCharacteristics;
        this.hkDevice = create_1.default(platform, tplinkDevice, category);
        this.name = this.hkDevice.name;
        this.log = utils_1.prefixLogger(platform.log, () => `${chalk_1.default.blue(`[${this.name}]`)}`);
        this.lsc = this.platform.lsc.bind(this.platform);
        const categoryName = (_a = platform.getCategoryName(category)) !== null && _a !== void 0 ? _a : '';
        if (homebridgeAccessory !== undefined) {
            this.homebridgeAccessory = homebridgeAccessory;
            this.log.debug(`Existing Accessory found [${homebridgeAccessory.context.deviceId}] [${homebridgeAccessory.UUID}] category: ${categoryName}`);
            this.homebridgeAccessory.displayName = this.name;
            if (this.homebridgeAccessory.category !== category) {
                this.log.warn(`Correcting Accessory Category from: ${platform.getCategoryName(this.homebridgeAccessory.category)} to: ${categoryName}`);
                this.homebridgeAccessory.category = category;
            }
        }
        else {
            const uuid = platform.api.hap.uuid.generate(this.hkDevice.id);
            this.log.debug(`Creating new Accessory [${this.hkDevice.id}] [${uuid}] category: ${categoryName}`);
            // eslint-disable-next-line new-cap
            this.homebridgeAccessory = new platform.api.platformAccessory(this.name, uuid, category);
            this.platform.registerPlatformAccessory(this.homebridgeAccessory);
        }
        const accInfo = accessory_information_1.default(platform.api.hap)(this.homebridgeAccessory, this.hkDevice);
        if (accInfo !== undefined) {
            this.services.AccessoryInformation = accInfo;
        }
        else {
            this.log.error('Could not retrieve default AccessoryInformation');
        }
        this.homebridgeAccessory.context.deviceId = this.hkDevice.id;
        this.homebridgeAccessory.on("identify" /* IDENTIFY */, () => {
            this.hkDevice.identify();
        });
        services.forEach((serviceConstructor) => {
            const serviceName = this.platform.getServiceName(serviceConstructor);
            if (serviceName === undefined) {
                this.log.error('Could not find service name for UUID:', serviceConstructor.UUID);
                return;
            }
            let service = this.homebridgeAccessory.getService(serviceConstructor);
            if (!service) {
                this.log.debug(`Creating new ${serviceName} Service`);
                service = this.homebridgeAccessory.addService(serviceConstructor, this.name);
            }
            else {
                service.setCharacteristic(this.platform.Characteristic.Name, this.name);
            }
            this.services[serviceName] = service;
        });
        if (this.services.Outlet) {
            const characteristics = [this.platform.Characteristic.Name, this.platform.Characteristic.On];
            if (category === 7 /* OUTLET */) {
                characteristics.push(this.platform.Characteristic.OutletInUse);
            }
            if (this.config.addCustomCharacteristics) {
                characteristics.push(...[
                    CustomCharacteristic.Amperes,
                    CustomCharacteristic.KilowattHours,
                    CustomCharacteristic.VoltAmperes,
                    CustomCharacteristic.Volts,
                    CustomCharacteristic.Watts,
                ]);
            }
            this.setupCharacteristics(this.services.Outlet, characteristics);
        }
        if (this.services.Switch) {
            this.setupCharacteristics(this.services.Switch, [
                this.platform.Characteristic.Name,
                this.platform.Characteristic.On,
            ]);
        }
        if (this.services.Lightbulb) {
            const characteristics = [
                this.platform.Characteristic.Name,
                this.platform.Characteristic.On,
                this.platform.Characteristic.Brightness,
                this.platform.Characteristic.ColorTemperature,
                this.platform.Characteristic.Hue,
                this.platform.Characteristic.Saturation,
            ];
            if (this.config.addCustomCharacteristics) {
                characteristics.push(CustomCharacteristic.Watts);
            }
            this.setupCharacteristics(this.services.Lightbulb, characteristics);
        }
        // Remove Old Services
        this.homebridgeAccessory.services.forEach((service) => {
            if (service === this.services.AccessoryInformation)
                return;
            if (service === this.services.Lightbulb)
                return;
            if (service === this.services.Outlet)
                return;
            if (service === this.services.Switch)
                return;
            this.log.warn(`Removing stale Service: ${this.lsc(service)} uuid:[%s] subtype:[%s]`, service.UUID, service.subtype || '');
            this.homebridgeAccessory.removeService(service);
        });
    }
    setupCharacteristics(service, characteristicTypes) {
        const characteristicsToRemove = service.characteristics.filter((existingCharacteristic) => {
            return !characteristicTypes.find((characteristicToSetup) => characteristicToSetup.UUID === existingCharacteristic.UUID);
        });
        characteristicsToRemove.forEach((characteristicToRemove) => {
            this.log.warn(`Removing stale Characteristic: ${this.lsc(service, characteristicToRemove)} uuid:[%s]`, characteristicToRemove.UUID);
            service.removeCharacteristic(characteristicToRemove);
        });
        characteristicTypes.forEach((CharacteristicType) => {
            if (this.hkDevice.supportsCharacteristic(CharacteristicType)) {
                const characteristic = utils_1.getOrAddCharacteristic(service, CharacteristicType);
                const props = this.hkDevice.getCharacteristicProps(characteristic);
                if (props) {
                    characteristic.setProps(props);
                }
                characteristic.on('get', (callback) => {
                    this.log.debug(`get ${this.lsc(characteristic)}`);
                    this.hkDevice
                        .getCharacteristicValue(characteristic)
                        .then((value) => {
                        callback(null, value);
                    })
                        .catch((err) => {
                        this.log.error(`get ${this.lsc(characteristic)}`);
                        this.log.error(String(err));
                        callback(err);
                    });
                });
                if (this.hkDevice.supportsCharacteristicSet(characteristic)) {
                    characteristic.on('set', (value, callback) => {
                        this.log.debug(`set ${this.lsc(characteristic)} %s`, value);
                        this.hkDevice
                            .setCharacteristicValue(characteristic, value)
                            .then(() => {
                            callback(null);
                        })
                            .catch((err) => {
                            this.log.error(`set ${this.lsc(characteristic)}`);
                            this.log.error(String(err));
                            callback(err);
                        });
                    });
                }
                this.hkDevice.setCharacteristicUpdateCallback(characteristic, (value) => {
                    characteristic.updateValue(value);
                });
                return;
            }
            // Remove unsupported characteristic
            service.removeCharacteristic(service.getCharacteristic(CharacteristicType));
        });
    }
}
exports.default = TplinkAccessory;
//# sourceMappingURL=tplink-accessory.js.map