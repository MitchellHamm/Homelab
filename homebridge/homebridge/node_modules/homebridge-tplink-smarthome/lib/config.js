"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseConfig = exports.defaultConfig = exports.ConfigParseError = void 0;
const ajv_1 = __importDefault(require("ajv"));
const ajv_formats_1 = __importDefault(require("ajv-formats"));
const lodash_defaults_1 = __importDefault(require("lodash.defaults"));
const utils_1 = require("./utils");
class ConfigParseError extends Error {
    constructor(message, errors) {
        super(message);
        this.errors = errors;
        /**
         * Set by `Error.captureStackTrace`
         */
        this.stack = '';
        // remove leading / from dataPath
        const errorsAsString = errors != null
            ? errors
                .map((e) => {
                let msg = `\`${e.instancePath.replace(/^\//, '')}\` ${e.message}`;
                if ('allowedValues' in e.params) {
                    msg += `. Allowed values: ${JSON.stringify(e.params.allowedValues)}`;
                }
                return msg;
            })
                .join('\n')
            : '';
        this.name = 'ConfigParseError';
        if (errorsAsString === '') {
            this.message = message;
        }
        else {
            this.message = `${message}:\n${errorsAsString}`;
        }
        Error.captureStackTrace(this, this.constructor);
    }
}
exports.ConfigParseError = ConfigParseError;
exports.defaultConfig = {
    addCustomCharacteristics: true,
    inUseThreshold: 0,
    switchModels: ['HS200', 'HS210'],
    discoveryPort: 0,
    broadcast: '255.255.255.255',
    pollingInterval: 10,
    deviceTypes: ['bulb', 'plug'],
    macAddresses: undefined,
    excludeMacAddresses: undefined,
    devices: undefined,
    timeout: 15,
    transport: undefined,
    waitTimeUpdate: 100,
};
function isArrayOfStrings(value) {
    return (Array.isArray(value) && value.every((item) => typeof item === 'string'));
}
function isDeviceConfigInput(value) {
    return (utils_1.isObjectLike(value) &&
        'host' in value &&
        typeof value.host === 'string' &&
        (!('port' in value) || typeof value.port === 'number'));
}
function isArrayOfDeviceConfigInput(value) {
    return (Array.isArray(value) && value.every((item) => isDeviceConfigInput(item)));
}
function isTplinkSmarthomeConfigInput(c) {
    return (utils_1.isObjectLike(c) &&
        (!('addCustomCharacteristics' in c) ||
            typeof c.addCustomCharacteristics === 'boolean') &&
        (!('inUseThreshold' in c) || typeof c.inUseThreshold === 'number') &&
        (!('switchModels' in c) || isArrayOfStrings(c.switchModels)) &&
        (!('discoveryPort' in c) || typeof c.discoveryPort === 'number') &&
        (!('broadcast' in c) || typeof c.broadcast === 'string') &&
        (!('pollingInterval' in c) || typeof c.pollingInterval === 'number') &&
        (!('deviceTypes' in c) || isArrayOfStrings(c.deviceTypes)) &&
        (!('macAddresses' in c) ||
            isArrayOfStrings(c.macAddresses) ||
            c.macAddresses === undefined) &&
        (!('excludeMacAddresses' in c) ||
            isArrayOfStrings(c.excludeMacAddresses) ||
            c.excludeMacAddresses === undefined) &&
        (!('devices' in c) ||
            isArrayOfDeviceConfigInput(c.devices) ||
            c.devices === undefined) &&
        (!('timeout' in c) || typeof c.timeout === 'number') &&
        (!('transport' in c) ||
            typeof c.transport === 'string' ||
            c.transport === undefined) &&
        (!('waitTimeUpdate' in c) || typeof c.waitTimeUpdate === 'number'));
}
function parseConfig(config) {
    const ajv = new ajv_1.default({ allErrors: true });
    ajv_formats_1.default(ajv);
    ajv.addVocabulary(['placeholder', 'titleMap']);
    // eslint-disable-next-line global-require, @typescript-eslint/no-var-requires
    const validate = ajv.compile(require('../config.schema.json').schema);
    const valid = validate(config);
    if (!valid)
        throw new ConfigParseError('Error parsing config', validate.errors);
    if (!isTplinkSmarthomeConfigInput(config))
        throw new ConfigParseError('Error parsing config');
    const c = lodash_defaults_1.default(config, exports.defaultConfig);
    const defaultSendOptions = {
        timeout: c.timeout * 1000,
        transport: c.transport,
    };
    return {
        addCustomCharacteristics: Boolean(c.addCustomCharacteristics),
        switchModels: c.switchModels,
        waitTimeUpdate: c.waitTimeUpdate,
        defaultSendOptions,
        discoveryOptions: {
            port: c.discoveryPort,
            broadcast: c.broadcast,
            discoveryInterval: c.pollingInterval * 1000,
            deviceTypes: c.deviceTypes,
            deviceOptions: {
                defaultSendOptions,
                inUseThreshold: c.inUseThreshold,
            },
            macAddresses: c.macAddresses,
            excludeMacAddresses: c.excludeMacAddresses,
            devices: c.devices,
        },
    };
}
exports.parseConfig = parseConfig;
//# sourceMappingURL=config.js.map