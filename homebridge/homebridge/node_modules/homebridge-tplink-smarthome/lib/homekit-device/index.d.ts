import type { Categories, CharacteristicProps, CharacteristicValue, Logger, Nullable } from 'homebridge';
import type TplinkSmarthomePlatform from '../platform';
import type { TplinkDevice } from '../utils';
export declare type CharacteristicConfig = {
    getValue?: () => Promise<Nullable<CharacteristicValue>>;
    setValue?: (value: CharacteristicValue) => Promise<void>;
    props?: Partial<CharacteristicProps>;
    updateCallback?: (value: CharacteristicValue) => void;
};
export default abstract class HomeKitDevice {
    readonly platform: TplinkSmarthomePlatform;
    readonly tplinkDevice: TplinkDevice;
    readonly category: Categories;
    readonly log: Logger;
    characteristics: Record<string, CharacteristicConfig>;
    private lsc;
    /**
     * Creates an instance of HomeKitDevice.
     */
    constructor(platform: TplinkSmarthomePlatform, tplinkDevice: TplinkDevice, category: Categories);
    get id(): string;
    get name(): string;
    get manufacturer(): string;
    get model(): string;
    get serialNumber(): string;
    get firmwareRevision(): string;
    get hardwareRevision(): string;
    abstract identify(): void;
    supportsCharacteristic(characteristic: {
        UUID: string;
    }): boolean;
    supportsCharacteristicSet(characteristic: {
        UUID: string;
    }): boolean;
    addCharacteristic(characteristic: {
        UUID: string;
    }, config: CharacteristicConfig): void;
    private getCharacteristic;
    getCharacteristicProps(characteristic: {
        UUID: string;
    }): CharacteristicConfig['props'];
    getCharacteristicValue(characteristic: {
        UUID: string;
    }): Promise<Nullable<CharacteristicValue>>;
    setCharacteristicValue(characteristic: {
        UUID: string;
    }, value: CharacteristicValue): Promise<void>;
    fireCharacteristicUpdateCallback(characteristic: {
        UUID: string;
    }, value: CharacteristicValue): void;
    setCharacteristicUpdateCallback(characteristic: {
        UUID: string;
    }, callbackFn: NonNullable<CharacteristicConfig['updateCallback']>): void;
    protected logRejection(reason: unknown): void;
}
//# sourceMappingURL=index.d.ts.map